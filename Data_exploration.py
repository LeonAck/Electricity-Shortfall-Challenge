"""
Dataset Description
Data Description
This dataset contains information about the weather conditions in various Spanish cities for the time of 2015-2017. The dataset also has information about the three hourly load shortfalls for the same period. In the context of this problem, the three hourly load shortfall is the difference between the energy generated by means of fossil fuels and renewable sources.

The dataset contains 47 features and 1 target. The features include the time and the city-specific weather variables i.e. the wind speed in the city of Barcelona. In total there is weather data available for 5 cities but not all cities have weather information available for every weather category e.g. we might have wind speed data for Barcelona but not rainfall data whereas we have both rainfall and wind speed information for Valencia.

We have weather data for the following cities of Spain:

Madrid
Valencia
Seville
Bilbao
Barcelona
The weather categories in the dataset include:

wind_speed
wind_degree
rain_1h
rain_3h
humidity
clouds_all
pressure
snow_3h
weather_id
temp_max
temp
File descriptions
df_train.csv - the training set
df_test.csv - the test set
sample_submission_load_shortfall.csv - a sample submission file in the correct format
Features
Below follows a brief description of the features and targets contained in the dataset.

time: Time at which the data was recorded
{City Name}_wind_speed: The wind speed at a specific time interval for the named city.
{City Name}_wind_degree: The strength of the wind for the named city at a specific time interval - expressed as a category.
{City Name}_rain_1h: A metric expressing the amount of rain that has fallen in the past hour in a particular city.
{City Name}_rain_3h:A metric expressing the amount of rain that has fallen in the past three hours in a particular city.
{City Name}_humidity: The level of humidity as measured at the defined time for the specific city mentioned.
{City Name}_clouds_all: The level of cloud coverage as measured at the specified point in time for the specific city mentioned.
{City Name}_pressure: The atmospheric pressure for the named city at a specific time interval - expressed as a category.
{City Name}_snow_3h: A metric expressing the amount of snow that has fallen in the past three hours in a particular city.
{City Name}_weather_id: A metric used to explain the weather condition of a specific city at a specified time.
{City Name}_temp_max: The maximum temperature for a specific city at a point in time.
{City Name}_temp_min: The minimum temperature for a specific city at a point in time.
{City Name}_temp: The average temperature for a specific city at a point in time.
Target Variable
load_shortfall_3h: The difference between the energy generated by the method of renewable energy sources, such as solar, wind, geothermal, etc., and energy generated with fossil fuels - partitioned in three-hour windows.

""" 

import pandas as pd
import os


def initial_checks(datasets, names):
    for data_set, name in zip(datasets, names):
        print(f"Informatie over data set {name} is:\n")
        print(f"Shape: {data_set.shape}")
        print(f"Columns: {data_set.columns}")


# Functie om per stad de variabelen te tonen
def city_variable_lists(df, cities=None):
    if cities is None:
        cities = ['Madrid', 'Valencia', 'Seville', 'Bilbao', 'Barcelona']
    city_vars = {city: [] for city in cities}
    for col in df.columns:
        for city in cities:
            prefix = f'{city}_'
            if col.startswith(prefix):
                city_vars[city].append(col)
    return city_vars


def check_variables(df):
    # Check categorical variables
    categorical_vars = df.select_dtypes(include=['object', 'category']).columns.tolist()
    print("Categorical Variables:")
    for var in categorical_vars:
        unique_options = df[var].unique()
        print(f"{var}: {unique_options}")

    # Check numerical variables
    numerical_vars = df.select_dtypes(include=['number']).columns.tolist()

    # Organize numerical variables by type
    variable_types = {
        'wind_speed': [],
        'wind_deg': [],
        'rain_1h': [],
        'rain_3h': [],
        'humidity': [],
        'clouds_all': [],
        'pressure': [],
        'snow_3h': [],
        'weather_id': [],
        'temp_max': [],
        'temp_min': [],
        'temp': []
    }

    for var in numerical_vars:
        for key in variable_types.keys():
            if key in var:
                variable_types[key].append(var)
                break

    print("\nNumerical Variables:")
    for var_type, vars in variable_types.items():
        print(f"\n{var_type.capitalize()} Variables:")
        for var in vars:
            min_val = df[var].min()
            max_val = df[var].max()
            range_val = max_val - min_val
            print(f"{var}: Min = {min_val}, Max = {max_val}, Range = {range_val}")
